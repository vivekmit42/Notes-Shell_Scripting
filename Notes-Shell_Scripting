----------------------------------------------------------------------------------------------------------------------
To check which bash you are using

    #echo $0

-------------------------------------------------------------------------------------------------------------------------
What is SHEBANG?

    #!/bin/bash

*above line is called shebang
*when a operating system is runs a scripts, then which shell will be used to execute the scripts is defined in this shebang line.
*It is not mandatory to specify in the script but it best practice standard.
--------------------------------------------------------------------------------------------------------------------------
echo "Text to print"                        --------- Printing output to terminal
--------------------------------------------------------------------------------------------------------------------------
How to run a script

*Make sure script has executable permission (rwx)
*Run using these commands:
    #./script.sh
    #./path/script.sh                                           --- this require rwx permission
    #bash script.sh                                             --- it will directly excute script without rwx permission

Ctrl+C to terminate
Ctrl+z to stop

-----------------------------------------------------------------------------------------------------------------------

First Basic Script

#!/bin/bash
echo "Hello this is my first script"

------------------------------------------------------------------------------------------------------------------------

What are variables?

It is the box which is used to assign a value like x=10, here x is a variable which is holding value 10.


In Shell scripting, we use variable in following manner

VAR_NAME=value
VAR_NAME=$(hostname)

echo $VAR_NAME

CONSTANT VARIABLE

Variable which you cant change after declaring

readonly var_name="Hi"

--------------------------------------------------------------------------------------------------------------------------

ARRAY

How to define an array?

myarray=(1 2 Hello "hey Man")

How to get values from an array?

echo "${myarray[0]}"

echo "${myarray[1]}"

-------------------------------------------------------------------------------------------------------------------------

ARRAY

How to find no of values in an array

echo " no of values, length of an array is ${#myarray[*]}"

How to jump between values 

myarray[*]:startingindexvalue:how many value you want
like 

myarray=(1 2 Hello "hey Man" 55 66 8888)

echo "printing array myarray[*]:2:3"

How to update/insert new value into array

myarray+=(New best GGN)

-----------------------------------------------------------------------------------------------------------------------

ARRAY KEY-VALUE PAIR

declare - A myarray
myarray=([name]=Paul [age]=20)

echo "${myarray[name]}"

-----------------------------------------------------------------------------------------------------------------------

String Operations

myvar="Hey Buddy, How are you?"

How to find out variable length?

myvarlength=${#myvar}

echo "Length of the myvariable is $myvarlength"

How to convert string into UPPER CASE?

echo "UPPER CASE is ${myvar^^}"

How to convert String into LOWER CASE?

echo "LOWER CASE is ${myvar,,}"

How to do slice string?

myvar="Hey Buddy, How are you?"

slice=${myvar:6:11}

echo "SLICING is $slice "

----------------------------------------------------------------------------------------------------------------------
USER INTERACTION

Take input from user

    read <var_name>
    read -p "Your name is" namevar
    echo "namevar"

-------------------------------------------------------------------------------------------------------------------------

Arithmetic

two methods available:

        1. using let method
            like:
                    a=100
                    let b=a*100
                    echo "$b"

                    example 1:
                    #!/bin/bash
                        read -p "What is your name?" name
                        read -p "what is your age?" age
                        read -p "What is your monthly salary today?" msal

                        let a=msal*40*12

                        echo "Hi $name, as per your age$age, your life time earning as per your today's salary will be:$a"

        2. using double bracket
            like:
                    ((a++))
                    ((a=5*100))

                    example 1:
                    
                        read -p "What is your name?" name
                        read -p "what is your age?" age
                        read -p "What is your monthly salary today?" msal

                        echo "Hi $name, as per your age$age, your life time earning as per your today's salary will be:$(($msal*40*12))"

-------------------------------------------------------------------------------------------------------------------------------------------------

CONDITIONAL STATEMENT

1. IF ELSE CONDITION:

read -p " Hi what is your marks in mathematics:  " math

if [[ $math -ge  33 ]]
then
        echo " You are Pass!"
else
        echo " You are Failed!!!"
fi

2. ELIF (IF ELSE NESTED CONDITION):

                read -p "How many marks you got in maths??" math

                if [[ $math -lt 33  ]]
                then
                        echo " You FAILED!!"
                elif [[ $math -lt 60  ]]
                then
                        echo " You got Second Division"
                elif [[ $math -lt 99  ]]
                then
                        echo "You got First Division!!!!!!"
                elif [[  $math -ge 99  ]]
                then
                        echo "You are a topper"
                fi

3. CASE

                    #!/bin/bash
                    #CASE CONCEPT

                    echo "BASIC LINUX OPERATIONS"

                    echo "a = To know what is today's date"
                    echo "b = To know your os name & details"
                    echo "c = To know your uptime"
                    echo "d = To check disk management"

                    read choice

                    case $choice in
                            a) date;;
                            b) cat /etc/os-release;;
                            c) uptime;;
                            d)
                                    df -hT

                                    echo " looking for fdisk"

                                    fdisk -l;;

                            *) echo "Please provide correct input"
                    esac

---------------------------------------------------------------------------------------------------------------------

LOGICAL OPERATORS (AND , OR , NOT)      && , || , !

condition1 && condition2        -- If both conditions are true then true otherwise false

condition1 || condition2        -- If any of the condition is true then it is true

condition1!                     -- If condition1 is true then it is false and vice versa

----------------------------------------------------------------------------------------------------------------------

EQUAL                                   -eq(for numeric values)  OR ==(for string values)
GREATER THAN EQUAL TO                   -ge
LESS THAN EQUAL TO                      -le
NOT EQUAL TO                            -ne  OR !=
GREATER THAN                            -gt
LESS THAN                               -lt

------------------------------------------------------------------------------------------------------------------------

USE CONDITIONAL OPERATOR IF ELSE IN SHORT FORM

                                        read -p "What's your age?" age

                                        [[ $age -ge 18 ]] && echo "Adult" || echo "Minor"

--------------------------------------------------------------------------------------------------------------------------

LOOPS

1. for loop

                        Example 1:
                            for i in {1..30}
                            do
                                    echo "$i"
                            done

                            for name in ram shyam raju maju monu sonu
                            do
                                    echo "Name is $name"

                            done
                        Example 2:
                            myarray=( 1 2 3 4 5 6 7 8 9 q w e r t y u i )

                            length=${#myarray[*]}
                            for (( i=0;i<$length;i++))
                            do
                                    echo " Value of my array is ${myarray[$i]}"
                            done
                        Example 3: Read content from file
                                
                                FILE=/home/vivek/all.txt

                                for name in $(cat $FILE)
                                do
                                        echo "Name is $name"
                                done


------------------------------------------------------------------------------------------------------------------------

2. WHILE LOOP

                                Example 1:
                                count=0
                                num=10

                                while [[ $count -le $num ]]
                                do
                                        echo "Numbers are $count"
                                        let count++
                                done

                                Example 2: Read content from txt file
                    
                                while read myvar
                                do
                                        echo "Value from file is $myvar"
                                done < /home/vivek/all.txt

                                Example 3: To read content from csv file

                                        while IFS="," read id name age                          -- here IFS stands for internal field separator
                                        do
                                                echo "ID is $id"
                                                echo "name is $name"
                                                echo "age is $age"
                                        done < /home/vivek/all.csv
                                Example 4: To read content from csv file using while via awk command

                                                cat /home/vivek/all.csv | awk 'NR!=1 {print}' | while IFS=',' read id name age
                                                do
                                                        echo "ID is $id"
                                                done


--------------------------------------------------------------------------------------------------------------------------
3. UNTIL LOOP

                                a=10
                                until [[ $a -eq 1 ]]
                                do
                                        echo "$a"
                                        let a--
                                done
----------------------------------------------------------------------------------------------------------------------
4. INFINITE LOOP ( USING WHILE LOOP )

                                while true
                                do
                                        echo "Hi Buddy"
                                        sleep 3s
                                done

-----------------------------------------------------------------------------------------------------------------------
5. INFINITE LOOP (USING FOR LOOP)

                                for (( ;; ))
                                do
                                        echo "Hi Buddy"
                                        sleep 2s
                                done

---------------------------------------------------------------------------------------------------------------------

FUNCTIONS

What are functions?
*Block of code which perform same task and run when it is called.
*can be reuse many times in our program which lessen out lines of code.
*we can pass arguments to the method.

Method 1 : 
Declare function using 

        function Calculator{
                ....
        }
                        Example 1: First  method of declaring fucntion
                        
                                function welcomeNote {
                                echo "----------------"
                                echo " WELCOME "
                                echo "----------------"
                                }
                                welcomeNote

                                welcomeNote

Method 1 : 
Declare function using

        Calculator(){
                ...
        }

                        Example 1: Second method of declaring function

                                welcomeNote(){
                                        echo "---------------"
                                        echo "WELCOME"
                                        echo "---------------"
                                }
                                welcomeNote

                                welcomeNote

------------------------------------------------------------------------------------------------------------------------
How to use arguments in functions?

                        welcomeNote(){
                                local name=$1
                                local age=$2
                                local company=$3

                                echo " Hi, your name is $1, your age is $2, you are working in $3 company"

                        }
                        welcomeNote "Vivek Chaudhary" "31" "Infosys Ltd"
OUTPUT --->
 Hi, your name is Vivek Chaudhary, your age is 31, you are working in Infosys Ltd company

--------------------------------------------------------------------------------------------------------------------------

How to Pass arguments in scripts?

                        echo "First argument is $1"

                        echo " Second argument is $2"

                        echo " All the arguments are: $@"

                        echo " Number of arguments you have passed are: $#"

-----------------------------------------------------------------------------------------------------------------------

How to pass argument and use in the for loop?

                        echo "First argument is $1"

                        echo " Second argument is $2"

                        echo " All the arguments are: $@"

                        echo " Number of arguments you have passed are: $#"

                        for e in $@
                        do
                                echo "copying file - $e"
                        done

Output--->
localhost:/home/vivek/myscripts # ./script_function4.sh hi vivek

First argument is hi
 Second argument is vivek
 All the arguments are: hi vivek
 Number of arguments you have passed are: 2
copying file - hi
copying file - vivek

-----------------------------------------------------------------------------------------------------------------------

SHIFTING OF ARGUMENTS

SHIFT - When we pass multiple arguments, we can shift the arguments

                        Example:
                                echo " Creating a new user"

                                echo " username is $1"

                                shift

                                echo " Description is $@"

here it will take first argument as $1 and rest it will count as second argument like

OUTPUT --->

localhost:/home/vivek/myscripts # ./script_function5.sh vivek this is test account
 Creating a new user
 username is vivek
 Description is this is test account
localhost:/home/vivek/myscripts #

---------------------------------------------------------------------------------------------------------------------

break - to stop the loop

continue - to stop current interation of loop and start next iteration.

                        Example: Use case for break
                                n=6
                                for i in 1 2 3 4 5 6  7 8 9
                                do
                                        #break the loop if n is found
                                        if [[ $n -eq $i  ]]
                                        then
                                                echo " $n is found  "
                                                break
                                        fi
                                        echo " Number is $i"

                                done
Output--->

localhost:/home/vivek/myscripts # ./script_function6.sh
 Number is 1
 Number is 2
 Number is 3
 Number is 4
 Number is 5
 6 is found

                        Example: Use case for continue

                                        for i in 1 2 3 4 5 6 7 8 9 10
                                        do
                                                let r=$i%2
                                                if [[ $r -eq 0  ]]
                                                then
                                                        continue
                                                fi
                                                echo " ODD number is $i  "
                                        done
OUTPUT ---->

localhost:/home/vivek/myscripts # ./script_function7.sh
 ODD number is 1
 ODD number is 3
 ODD number is 5
 ODD number is 7
 ODD number is 9
localhost:/home/vivek/myscripts #

-------------------------------------------------------------------------------------------------------------------

exit -  to stop script at a point

                        EXAMPLE: Use case for exit
                                
                                if [[ $# -eq 0  ]]
                                then
                                        echo " you have not passed argument exiting.."
                                        exit 1
                                fi

                                echo "First argument is $1"

                                echo " Second argument is $2"

                                echo " All the arguments are: $@"

                                echo " Number of arguments you have passed are: $#"


                                # Using fo loop to access the values from arguments

                                for e in $@
                                do
                                        echo "copying file - $e"
                                done


OUTPUT---->

localhost:/home/vivek/myscripts # ./script_function8.sh d
First argument is d
Second argument is
All the arguments are: d
Number of arguments you have passed are: 1
copying file - d

localhost:/home/vivek/myscripts #./script_function8.sh
 you have not passed argument exiting..

----------------------------------------------------------------------------------------------------------------------

sleep - to create delay between two executions.


----------------------------------------------------------------------------------------------------------------------

exit status $? - gives you status of previous command if that was successful.

it will give you status of command executed just before

if it return 0 - success
if it return 1 - failed

                                Example:
                                        # pwd
                                        /home/vivek/myscripts
                                        # echo $?
                                        0
                                        # ld
                                        ld: no input files
                                        # echo $?
                                        1
                                Example:
                                        read -p "which site you want to check:  " site
                                        ping -c 1 $site

                                        if [[  $? -eq 0   ]]
                                        then
                                                echo "Successful connected to $site"
                                        else
                                                echo "Unable to connect to $site"
                                        fi

OUTPUT --->

# ./script_exit.sh

which site you want to check:  www.qwerttysdbhsd.com

ping: www.qwerttysdbhsd.com: Name or service not known

Unable to connect to www.qwerttysdbhsd.com


# ./script_exit.sh

which site you want to check:  www.google.com

PING www.google.com (142.250.77.196) 56(84) bytes of data.
64 bytes from del11s08-in-f4.1e100.net (142.250.77.196): icmp_seq=1 ttl=128 time=7.62 ms
--- www.google.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 7.619/7.619/7.619/0.000 ms

Successful connected to www.google.com
---------------------------------------------------------------------------------------------------------------------
basename - strip directory info and only give filename

dirname - strip the filename and gives directory path

realpath - gives you full path for a file

Example:

localhost:/home/vivek/myscripts # realpath all.csv
/home/vivek/myscripts/all.csv
localhost:/home/vivek/myscripts # basename /home/vivek/all.csv
all.csv
localhost:/home/vivek/myscripts # dirname /home/vivek/all.csv
/home/vivek
localhost:/home/vivek/myscripts # realpath all.csv
/home/vivek/myscripts/all.csv
localhost:/home/vivek/myscripts #

------------------------------------------------------------------------------------------------------------------------

It is a check which should be declared in scripts, in which files,dir is used, so that it will tell whether file, dir is available or not.

Check If FILE/DIR Exists or not:

if [ -d folder_name] If folder exists

[ ! -d folder_name] If folder not exists

if [ -f file_name] If file exists

if [! -f file_name] If file not exists


                        Example:
                                # cat script_filecheck.sh
                                FILEPATH1="/home/vivek/all.txt"
                                FILEPATH2="/home/vivek/all.csv"

                                if [[ -f $FILEPATH3  ]]
                                then
                                        echo "FILE EXISTS"
                                else
                                        echo " FILE NOT EXISTS"
                                        exit 1
                                fi

OUTPUT--->

# ./script_filecheck.sh
FILE NOT EXISTS

-------------------------------------------------------------------------------------------------------------------------
BASH VARIABLES

RANDOM - A random integer between 0 and 32767 is generated


                                example:
                                #echo $RANDOM
                                32222

                                
                                Example: script to generate random number between 0 to 6

                                NO=$(( $RANDOM % 6 + 1 ))
                                echo " Number is $NO"


Output --->

# ./script_dice.sh
Number is 2
-------------------------------------------------------------------------------------------------------------------------


UID - user ID of the user logged in.
                                        Example:
                                                #echo $UID
                                                0

                                        Example:
                                                # cat script_usecheck.sh
                                                if [[ $UID -eq 0  ]]
                                                then
                                                        echo "User is root"
                                                else
                                                        echo "User is not root"
                                                fi

OUTPUT---->

# ./script_usecheck.sh
User is root

--------------------------------------------------------------------------------------------------------------------------
Redirection in scripts

>              - add entry
>>              - append new entry at last

                                Example:
                                        # cat script_redirect.sh
                                        #!/bin/bash
                                        ping -c 1 www.google.com > /home/vivek/all2.txt

                                        OUTPUT--->

                                        # ./script_redirect.sh
                                        # cat /home/vivek/all2.txt

                                        PING www.google.com (142.250.194.36) 56(84) bytes of data.
                                        64 bytes from del12s02-in-f4.1e100.net (142.250.194.36): icmp_seq=1 ttl=128 time=16.9 ms

                                        --- www.google.com ping statistics ---
                                        1 packets transmitted, 1 received, 0% packet loss, time 0ms
                                        rtt min/avg/max/mdev = 16.903/16.903/16.903/0.000 ms
------------------------------------------------------------------------------------------------------------------------------

DEV/NULL

What is DEV/NULL?
In case if you dnt want to print the output of a command on terminal or write in a file

we can redirect the output to /dev/null

                                Example:
                                        # cd /root//s
                                        -bash: cd: /root//s: No such file or directory
                                        # cd /root//s &> /dev/null
                                        #

                                Example:
                                        # cat script_devnull.sh
                                        #!/bin/bash
                                        read -p "which site you want to check:  " site

                                        ping -c 1 $site &> /dev/null


                                        if [[  $? -eq 0   ]]
                                        then
                                                echo "Successful connected to $site"
                                        else
                                                echo "Unable to connect to $site"
                                        fi

OUTPUT---->

# ./script_devnull.sh
which site you want to check:  www.google.com
Successful connected to www.google.com
# ./script_devnull.sh
which site you want to check:  www.googlegoogle.com
Unable to connect to www.googlegoogle.com
----------------------------------------------------------------------------------------------------------------------
PRINT NAME OF THE SCRIPT

echo " The name of the script is: ${0}"

                                Example:
                                        # cat script_script_name.sh
                                        #!/bin/bash

                                        echo " The name of your script is ${0}"

OUTPUT---->

# ./script_script_name.sh
The name of your script is ./script_script_name.sh

------------------------------------------------------------------------------------------------------------------------
LOG MESSAGES

If you want to maintain the logging for your script, you can use logger in your script.

you can find the logs under

                /var/logs/messages 

Example:

#!/bin/bash

logger " this is log from ${0}"

Output-->
when you execute this script it will log a entry in /var/log/message like this

2025-01-15T18:40:44.717145+05:30 localhost root:  this is log from ./script_logger.sh


------------------------------------------------------------------------------------------------------------------------

DEBUGGING SCRIPTS

If we can enable the debugging of the script using below in the script.

set -x

if you put set -x in any script, when you run script it will in debug mode.

set -e 
If you put set -e in your script then it will stop your script wherever you have error in your script.

------------------------------------------------------------------------------------------------------------------------
Running Script in Background

when you run your script with nohup then it will run in background and you can perform any task while your script will execute.

#nohup ./script.sh

and if you want to see what has happened with your script then 
check your nohup.txt file it will show output of your script.
-------------------------------------------------------------------------------------------------------------------------

AUTOMATION OUR SCRIPT

At or Crontab

For scheduling your script to run at particular time then we can use following methods:

        1. at 
                atq - to check scheduled jobs
                atrm <id> - to remove the schedule
                redirect.log file will be created after execution of script, it is used to verify that script is executed or not.
                at command is used when you want your script to run for one time in future.

                Example: schedule a job at future time
                at 12:09 PM (press enter)
                at>./home/vivek/myscript/script.sh
                Ctrl+D
                Example: schedule a job for future time and date
                at 23:00 31 July 2025
                at>./home/vivek/myscript/script.sh
                ctrl+D
                Example: remove a job
                atq
        4       Mon Jul 31 12:00:00 2025 a paul
        5       Mon Jul 31 13:00:00 2025 a paul
        6       Mon Jul 31 14:00:00 2025 a paul
                atrm 4                          - it will remove job no 4

        2. Cron
                crontab -l      -- to check the existing jobs
                crontab -e      -- to add new job
                Trick for this is use crontab guru to generate your cron tab
                Example:
                #crontab -e
                * * * * * cd /home/vivek/myscript/ && ./script1.sh
Above cron job means go to above directory and run script1.sh for every minute every day every week every month 
---------------------------------------------------------------------------------------------------------------------